<?xml version="1.0"?>
<project version="0.17.1" title="Rbppavl">
  <file path="\Rbppavl.php" hash="5bc00d6ec41c9f95ed99b8abcc8f861b" package="Rbppavl">
    <docblock>
      <description>PHP AVL binary tree</description>
      <long-description>&lt;p&gt;A set of PHP classes implementing management of binary trees according to
AVL rules.
The API exposes tree management operations (insert, replace, delete, find),
traversal (find, first, last, prev, next, curr). Nodes within the trees are
not exposed publicly.
Tree and traversal operations implement relaxed balance factors, and
parent-pointer node structures.
Hooks for node comparison, error handling and logging capabilities are provided
via a callback interface.&lt;/p&gt;

&lt;p&gt;PHP version 5&lt;/p&gt;</long-description>
      <tag line="2" name="category" description="Structures"/>
      <tag line="2" name="package" description="Rbppavl"/>
      <tag line="2" name="author" description="mondrake &lt;mondrake@mondrake.org&gt;"/>
      <tag line="2" name="license" description="http://www.gnu.org/licenses/gpl.html GNU GPLv3"/>
      <tag line="2" name="link" description="http://github.com/mondrake/Rbppavl" link="http://github.com/mondrake/Rbppavl"/>
    </docblock>
    <include type="Require Once" line="108">
      <name>RbppavlNode.php</name>
    </include>
    <include type="Require Once" line="109">
      <name>RbppavlCommon.php</name>
    </include>
    <include type="Require Once" line="110">
      <name>RbppavlTree.php</name>
    </include>
    <include type="Require Once" line="111">
      <name>RbppavlTraverser.php</name>
    </include>
    <include type="Require Once" line="112">
      <name>RbppavlCbInterface.php</name>
    </include>
    <constant namespace="default" line="27" package="Rbppavl">
      <name>RBPPAVL_VERSION_NUMBER</name>
      <value>'0.1.0'</value>
      <docblock>
        <description>Rbppavl version number</description>
        <long-description/>
      </docblock>
    </constant>
    <constant namespace="default" line="32" package="Rbppavl">
      <name>RBPPAVL_VERSION_STATE</name>
      <value>'beta'</value>
      <docblock>
        <description>Rbppavl version state</description>
        <long-description/>
      </docblock>
    </constant>
    <constant namespace="default" line="45" package="Rbppavl">
      <name>RBPPAVL_DEBUG</name>
      <value>7</value>
      <docblock>
        <description>'Debug' status level or diagnostic</description>
        <long-description/>
      </docblock>
    </constant>
    <constant namespace="default" line="50" package="Rbppavl">
      <name>RBPPAVL_INFO</name>
      <value>6</value>
      <docblock>
        <description>'Information' status level or diagnostic</description>
        <long-description/>
      </docblock>
    </constant>
    <constant namespace="default" line="55" package="Rbppavl">
      <name>RBPPAVL_NOTICE</name>
      <value>5</value>
      <docblock>
        <description>'Notice' status level or diagnostic</description>
        <long-description/>
      </docblock>
    </constant>
    <constant namespace="default" line="60" package="Rbppavl">
      <name>RBPPAVL_WARNING</name>
      <value>4</value>
      <docblock>
        <description>'Warning' status level or diagnostic - partial failure not preventing further processing</description>
        <long-description/>
      </docblock>
    </constant>
    <constant namespace="default" line="65" package="Rbppavl">
      <name>RBPPAVL_ERROR</name>
      <value>3</value>
      <docblock>
        <description>'Error' status level or diagnostic - failure preventing further processing</description>
        <long-description/>
      </docblock>
    </constant>
    <constant namespace="default" line="74" package="Rbppavl">
      <name>RBPPAVL_TEXT</name>
      <value>-1</value>
      <docblock>
        <description>Identifier for textual diagnostic strings</description>
        <long-description/>
      </docblock>
    </constant>
    <constant namespace="default" line="79" package="Rbppavl">
      <name>RBPPAVL_VALIDATION_OK</name>
      <value>0</value>
      <docblock>
        <description>AVL Tree validation - success</description>
        <long-description/>
      </docblock>
    </constant>
    <constant namespace="default" line="85" package="Rbppavl">
      <name>RBPPAVL_VALIDATION_HEIGHT_FAILURE</name>
      <value>1</value>
      <docblock>
        <description>AVL Tree validation - failure - node's stored tree height not
consistent with computed height</description>
        <long-description/>
      </docblock>
    </constant>
    <constant namespace="default" line="91" package="Rbppavl">
      <name>RBPPAVL_VALIDATION_BALANCE_FAILURE</name>
      <value>2</value>
      <docblock>
        <description>AVL Tree validation - failure - actual node's balance factor
exceeds limit</description>
        <long-description/>
      </docblock>
    </constant>
    <constant namespace="default" line="96" package="Rbppavl">
      <name>RBPPAVL_FIND_EXACT_MATCH</name>
      <value>0</value>
      <docblock>
        <description>Find exact match</description>
        <long-description/>
      </docblock>
    </constant>
    <constant namespace="default" line="101" package="Rbppavl">
      <name>RBPPAVL_FIND_PREV_MATCH</name>
      <value>1</value>
      <docblock>
        <description>Find exact match or closest previous node if exact not found</description>
        <long-description/>
      </docblock>
    </constant>
    <constant namespace="default" line="106" package="Rbppavl">
      <name>RBPPAVL_FIND_NEXT_MATCH</name>
      <value>2</value>
      <docblock>
        <description>Find exact match or closest next node if exact not found</description>
        <long-description/>
      </docblock>
    </constant>
    <class final="false" abstract="true" line="126" namespace="default" package="Rbppavl">
      <name>Rbppavl</name>
      <extends/>
      <full_name>\Rbppavl</full_name>
      <docblock>
        <description>Baseline Rbppavl class.</description>
        <long-description>&lt;p&gt;Rbppavl root abstract class. This is empty to set a common parent class for the entire package.&lt;/p&gt;</long-description>
        <tag line="114" name="category" description="Structures"/>
        <tag line="114" name="package" description="Rbppavl"/>
        <tag line="114" name="author" description="mondrake &lt;mondrake@mondrake.org&gt;"/>
        <tag line="114" name="license" description="http://www.gnu.org/licenses/gpl.html GNU GPLv3"/>
        <tag line="114" name="link" description="http://github.com/mondrake/Rbppavl" link="http://github.com/mondrake/Rbppavl"/>
        <tag line="114" name="access" description="private"/>
      </docblock>
    </class>
  </file>
  <file path="\RbppavlCbInterface.php" hash="2f561ddc3c8fe36249d64abae7aa88b6" package="Rbppavl">
    <docblock>
      <description>PHP AVL binary tree</description>
      <long-description>&lt;p&gt;A set of PHP classes implementing management of binary trees according to
AVL rules.
The API exposes tree management operations (insert, replace, delete, find),
traversal (find, first, last, prev, next, curr). Nodes within the trees are
not exposed publicly.
Tree and traversal operations implement relaxed balance factors, and
parent-pointer node structures.
Hooks for node comparison, error handling and logging capabilities are provided
via a callback interface.&lt;/p&gt;

&lt;p&gt;PHP version 5&lt;/p&gt;</long-description>
      <tag line="2" name="category" description="Structures"/>
      <tag line="2" name="package" description="Rbppavl"/>
      <tag line="2" name="author" description="mondrake &lt;mondrake@mondrake.org&gt;"/>
      <tag line="2" name="license" description="http://www.gnu.org/licenses/gpl.html GNU GPLv3"/>
      <tag line="2" name="link" description="http://github.com/mondrake/Rbppavl" link="http://github.com/mondrake/Rbppavl"/>
    </docblock>
    <interface namespace="default" line="36" package="Rbppavl">
      <name>RbppavlCbInterface</name>
      <extends/>
      <full_name>\RbppavlCbInterface</full_name>
      <docblock>
        <description>Rbppavl callback class interface definition.</description>
        <long-description>&lt;p&gt;Defines callback methods needed by instances of RbppavlTree
and RbppavlTraverser.&lt;/p&gt;</long-description>
        <tag line="24" name="category" description="Structures"/>
        <tag line="24" name="package" description="Rbppavl"/>
        <tag line="24" name="author" description="mondrake &lt;mondrake@mondrake.org&gt;"/>
        <tag line="24" name="license" description="http://www.gnu.org/licenses/gpl.html GNU GPLv3"/>
        <tag line="24" name="link" description="http://github.com/mondrake/Rbppavl" link="http://github.com/mondrake/Rbppavl"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" line="50" package="Default">
        <name>compare</name>
        <docblock>
          <description>Compares two data objects.</description>
          <long-description/>
          <tag line="38" name="param" description="first data object" type="object" variable="$a">
            <type by_reference="false">object</type>
          </tag>
          <tag line="38" name="param" description="second data object" type="object" variable="$b">
            <type by_reference="false">object</type>
          </tag>
          <tag line="38" name="return" description="0 if $a == $b -1 if $a &lt; $b 1 if $a &gt; $b" type="int">
            <type by_reference="false">int</type>
          </tag>
          <tag line="38" name="api" description=""/>
        </docblock>
        <argument line="50">
          <name>$a</name>
          <default/>
          <type/>
        </argument>
        <argument line="50">
          <name>$b</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="61" package="Default">
        <name>dump</name>
        <docblock>
          <description>Returns a custom formatting of a data object.</description>
          <long-description/>
          <tag line="52" name="param" description="data object" type="object" variable="$data">
            <type by_reference="false">object</type>
          </tag>
          <tag line="52" name="return" description="customised format of the data object's content." type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="52" name="api" description=""/>
        </docblock>
        <argument line="61">
          <name>$data</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="77" package="Default">
        <name>diagnosticMessage</name>
        <docblock>
          <description>Handles a request to log a diagnostic message.</description>
          <long-description/>
          <tag line="63" name="param" description="{RBPPAVL_DEBUG|RBPPAVL_INFO|RBPPAVL_NOTICE|RBPPAVL_WARNING|RBPPAVL_ERROR}" type="int" variable="$severity">
            <type by_reference="false">int</type>
          </tag>
          <tag line="63" name="param" description="id of the diagnostic message" type="int" variable="$id">
            <type by_reference="false">int</type>
          </tag>
          <tag line="63" name="param" description="unqualified text of the diagnostic message" type="string" variable="$text">
            <type by_reference="false">string</type>
          </tag>
          <tag line="63" name="param" description="parameters to qualify the message" type="array" variable="$params">
            <type by_reference="false">array</type>
          </tag>
          <tag line="63" name="param" description="fully qualified text of the diagnostic message" type="string" variable="$qText">
            <type by_reference="false">string</type>
          </tag>
          <tag line="63" name="param" description="name of the calling class" type="string" variable="$className">
            <type by_reference="false">string</type>
          </tag>
          <tag line="63" name="return" description="" type="null">
            <type by_reference="false">null</type>
          </tag>
          <tag line="63" name="api" description=""/>
        </docblock>
        <argument line="77">
          <name>$severity</name>
          <default/>
          <type/>
        </argument>
        <argument line="77">
          <name>$id</name>
          <default/>
          <type/>
        </argument>
        <argument line="77">
          <name>$text</name>
          <default/>
          <type/>
        </argument>
        <argument line="77">
          <name>$params</name>
          <default/>
          <type/>
        </argument>
        <argument line="77">
          <name>$qText</name>
          <default/>
          <type/>
        </argument>
        <argument line="77">
          <name>$className</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="92" package="Default">
        <name>errorHandler</name>
        <docblock>
          <description>Handles an error condition.</description>
          <long-description/>
          <tag line="79" name="param" description="id of the diagnostic message" type="int" variable="$id">
            <type by_reference="false">int</type>
          </tag>
          <tag line="79" name="param" description="unqualified text of the diagnostic message" type="string" variable="$text">
            <type by_reference="false">string</type>
          </tag>
          <tag line="79" name="param" description="parameters to qualify the message" type="array" variable="$params">
            <type by_reference="false">array</type>
          </tag>
          <tag line="79" name="param" description="fully qualified text of the diagnostic message" type="string" variable="$qText">
            <type by_reference="false">string</type>
          </tag>
          <tag line="79" name="param" description="name of the calling class" type="string" variable="$className">
            <type by_reference="false">string</type>
          </tag>
          <tag line="79" name="return" description="" type="null">
            <type by_reference="false">null</type>
          </tag>
          <tag line="79" name="api" description=""/>
        </docblock>
        <argument line="92">
          <name>$id</name>
          <default/>
          <type/>
        </argument>
        <argument line="92">
          <name>$text</name>
          <default/>
          <type/>
        </argument>
        <argument line="92">
          <name>$params</name>
          <default/>
          <type/>
        </argument>
        <argument line="92">
          <name>$qText</name>
          <default/>
          <type/>
        </argument>
        <argument line="92">
          <name>$className</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
    </interface>
  </file>
  <file path="\RbppavlCommon.php" hash="e64ae0b993cede48b8f4836eab310f03" package="Rbppavl">
    <docblock>
      <description>PHP AVL binary tree</description>
      <long-description>&lt;p&gt;A set of PHP classes implementing management of binary trees according to
AVL rules.
The API exposes tree management operations (insert, replace, delete, find),
traversal (find, first, last, prev, next, curr). Nodes within the trees are
not exposed publicly.
Tree and traversal operations implement relaxed balance factors, and
parent-pointer node structures.
Hooks for node comparison, error handling and logging capabilities are provided
via a callback interface.&lt;/p&gt;

&lt;p&gt;PHP version 5&lt;/p&gt;</long-description>
      <tag line="2" name="category" description="Structures"/>
      <tag line="2" name="package" description="Rbppavl"/>
      <tag line="2" name="author" description="mondrake &lt;mondrake@mondrake.org&gt;"/>
      <tag line="2" name="license" description="http://www.gnu.org/licenses/gpl.html GNU GPLv3"/>
      <tag line="2" name="link" description="http://github.com/mondrake/Rbppavl" link="http://github.com/mondrake/Rbppavl"/>
    </docblock>
    <class final="false" abstract="true" line="37" namespace="default" package="Rbppavl">
      <name>RbppavlCommon</name>
      <extends>\Rbppavl</extends>
      <full_name>\RbppavlCommon</full_name>
      <docblock>
        <description>Common Rbppavl class.</description>
        <long-description>&lt;p&gt;Abstract class introducing properties common to RbppavlTree and
RbppavlTraverser.&lt;/p&gt;</long-description>
        <tag line="24" name="category" description="Structures"/>
        <tag line="24" name="package" description="Rbppavl"/>
        <tag line="24" name="author" description="mondrake &lt;mondrake@mondrake.org&gt;"/>
        <tag line="24" name="license" description="http://www.gnu.org/licenses/gpl.html GNU GPLv3"/>
        <tag line="24" name="link" description="http://github.com/mondrake/Rbppavl" link="http://github.com/mondrake/Rbppavl"/>
        <tag line="24" name="internal" description=""/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="44" package="Default">
        <name>$cbc</name>
        <default>null</default>
        <docblock>
          <description>Callback interface instance</description>
          <long-description/>
          <tag line="39" name="type" description="RbppavlCbInterface"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="51" package="Default">
        <name>$debugMode</name>
        <default>false</default>
        <docblock>
          <description>Debug mode - if true, tree management operation are verbosely diagnosed</description>
          <long-description/>
          <tag line="46" name="type" description="boolean"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="59" package="Default">
        <name>$memoryLimit</name>
        <default>0</default>
        <docblock>
          <description>If different from 0, insertions of new nodes are preliminary checked
vs remaining memory available</description>
          <long-description/>
          <tag line="53" name="type" description="integer"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="67" package="Default">
        <name>$memoryThreshold</name>
        <default>0</default>
        <docblock>
          <description>In combination with $memoryLimit, defines the minimum memory to be kept
free during tree insertion operations</description>
          <long-description/>
          <tag line="61" name="type" description="integer"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="79" package="Default">
        <name>$status</name>
        <default>array('level'         =&gt; RBPPAVL_NOTICE</default>
        <docblock>
          <description>Internal status of tree management classes (RbppavlTree, RbppavlTraverser)</description>
          <long-description>&lt;p&gt;Array keys:
- 'level'         status level complying to RFC 3164
- 'code'          status code as per _message()
- 'messageParams' array of parameters to qualify the message text&lt;/p&gt;</long-description>
          <tag line="69" name="type" description="array"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="94" package="Default">
        <name>__call</name>
        <docblock>
          <description>Handles calls to inaccessible methods</description>
          <long-description/>
          <tag line="84" name="param" description="the method invoked" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="84" name="param" description="the array representing the arguments passed to the method" type="array" variable="$args">
            <type by_reference="false">array</type>
          </tag>
          <tag line="84" name="return" description="" type="null">
            <type by_reference="false">null</type>
          </tag>
          <tag line="84" name="internal" description=""/>
        </docblock>
        <argument line="94">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
        <argument line="94">
          <name>$args</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="109" package="Default">
        <name>__get</name>
        <docblock>
          <description>Handles reads to inaccessible properties</description>
          <long-description/>
          <tag line="100" name="param" description="the property invoked" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="100" name="return" description="" type="null">
            <type by_reference="false">null</type>
          </tag>
          <tag line="100" name="internal" description=""/>
        </docblock>
        <argument line="109">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="125" package="Default">
        <name>__set</name>
        <docblock>
          <description>Handles writes to inaccessible properties</description>
          <long-description/>
          <tag line="115" name="param" description="the property invoked" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="115" name="param" description="the value attempted to be written" type="array" variable="$value">
            <type by_reference="false">array</type>
          </tag>
          <tag line="115" name="return" description="" type="null">
            <type by_reference="false">null</type>
          </tag>
          <tag line="115" name="internal" description=""/>
        </docblock>
        <argument line="125">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
        <argument line="125">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="141" package="Default">
        <name>getVersion</name>
        <docblock>
          <description>Gets Rbppavl version and state.</description>
          <long-description/>
          <tag line="131" name="param" description="if true, internal status is updated and a diagnostic message broadcast" type="boolean" variable="$setStatus">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="131" name="return" description="an array with [0] = Rbppavl version number and [1] = Rbppavl version state" type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="131" name="api" description=""/>
        </docblock>
        <argument line="141">
          <name>$setStatus</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="165" package="Default">
        <name>nodeFind</name>
        <docblock>
          <description>Finds a node in the tree.</description>
          <long-description/>
          <tag line="153" name="param" description="the tree to be searched" type="\RbppavlTree" variable="$tree">
            <type by_reference="false">\RbppavlTree</type>
          </tag>
          <tag line="153" name="param" description="the data object to be found" type="object" variable="$data">
            <type by_reference="false">object</type>
          </tag>
          <tag line="153" name="param" description="&amp;$y top node to start searching from" type="object" variable="$y">
            <type by_reference="false">object</type>
          </tag>
          <tag line="153" name="param" description="&amp;$q parent node of the found node" type="object" variable="$q">
            <type by_reference="false">object</type>
          </tag>
          <tag line="153" name="param" description="&amp;$dir last direction descended" type="int" variable="$dir">
            <type by_reference="false">int</type>
          </tag>
          <tag line="153" name="param" description="match mode {RBPPAVL_FIND_EXACT_MATCH|RBPPAVL_FIND_PREV_MATCH|RBPPAVL_FIND_NEXT_MATCH}" type="int" variable="$mode">
            <type by_reference="false">int</type>
          </tag>
          <tag line="153" name="return" description="pointer to the found node or null if not found" type="object">
            <type by_reference="false">object</type>
          </tag>
        </docblock>
        <argument line="165">
          <name>$tree</name>
          <default/>
          <type/>
        </argument>
        <argument line="165">
          <name>$data</name>
          <default/>
          <type/>
        </argument>
        <argument line="165">
          <name>$y</name>
          <default/>
          <type/>
        </argument>
        <argument line="165">
          <name>$q</name>
          <default/>
          <type/>
        </argument>
        <argument line="165">
          <name>$dir</name>
          <default/>
          <type/>
        </argument>
        <argument line="165">
          <name>$mode</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="243" package="Default">
        <name>nodePrev</name>
        <docblock>
          <description>Returns the previous node in in-order sequence.</description>
          <long-description>&lt;p&gt;If there are no more nodes returns null.&lt;/p&gt;</long-description>
          <tag line="233" name="param" description="the tree to be searched" type="\RbppavlTree" variable="$tree">
            <type by_reference="false">\RbppavlTree</type>
          </tag>
          <tag line="233" name="param" description="node to start searching from" type="object" variable="$node">
            <type by_reference="false">object</type>
          </tag>
          <tag line="233" name="return" description="previous node in in-order sequence or null if leftmost node input" type="object">
            <type by_reference="false">object</type>
          </tag>
        </docblock>
        <argument line="243">
          <name>$tree</name>
          <default/>
          <type/>
        </argument>
        <argument line="243">
          <name>$node</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="272" package="Default">
        <name>nodeNext</name>
        <docblock>
          <description>Returns the next node in in-order sequence.</description>
          <long-description>&lt;p&gt;If there are no more nodes returns null.&lt;/p&gt;</long-description>
          <tag line="262" name="param" description="the tree to be searched" type="\RbppavlTree" variable="$tree">
            <type by_reference="false">\RbppavlTree</type>
          </tag>
          <tag line="262" name="param" description="node to start searching from" type="object" variable="$node">
            <type by_reference="false">object</type>
          </tag>
          <tag line="262" name="return" description="next node in in-order sequence or null if rightmost node input" type="object">
            <type by_reference="false">object</type>
          </tag>
        </docblock>
        <argument line="272">
          <name>$tree</name>
          <default/>
          <type/>
        </argument>
        <argument line="272">
          <name>$node</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="298" package="Default">
        <name>nodeFirst</name>
        <docblock>
          <description>Returns the node with the least value (leftmost).</description>
          <long-description/>
          <tag line="291" name="param" description="the tree to be searched" type="\RbppavlTree" variable="$tree">
            <type by_reference="false">\RbppavlTree</type>
          </tag>
          <tag line="291" name="return" description="the leftmost node in the tree or null if tree is empty." type="object">
            <type by_reference="false">object</type>
          </tag>
        </docblock>
        <argument line="298">
          <name>$tree</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="319" package="Default">
        <name>nodeLast</name>
        <docblock>
          <description>Returns the node with the greatest value (rightmost).</description>
          <long-description/>
          <tag line="312" name="param" description="the tree to be searched" type="\RbppavlTree" variable="$tree">
            <type by_reference="false">\RbppavlTree</type>
          </tag>
          <tag line="312" name="return" description="the rightmost node in the tree or null if tree is empty." type="object">
            <type by_reference="false">object</type>
          </tag>
        </docblock>
        <argument line="319">
          <name>$tree</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="341" package="Default">
        <name>checkData</name>
        <docblock>
          <description>Checks if the data object passed to a method is valid.</description>
          <long-description/>
          <tag line="333" name="param" description="the data object" type="object" variable="$data">
            <type by_reference="false">object</type>
          </tag>
          <tag line="333" name="param" description="the class method calling the function" type="string" variable="$method">
            <type by_reference="false">string</type>
          </tag>
          <tag line="333" name="return" description="true if $data is a valid object, false elsewhere" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="341">
          <name>$data</name>
          <default/>
          <type/>
        </argument>
        <argument line="341">
          <name>$method</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="373" package="Default">
        <name>setStatus</name>
        <docblock>
          <description>Sets internal status</description>
          <long-description>&lt;p&gt;Internal status is updated with the severity level as identified by the message id.
Diagnostic message is passed over to the callback interface.
In case of RBPPAVL_ERROR, error handling is passed over to the callback interface;
if callback interface is not instantiated yet, a standard exception is thrown.&lt;/p&gt;</long-description>
          <tag line="359" name="param" description="the id of the diagnostic message" type="int" variable="$id">
            <type by_reference="false">int</type>
          </tag>
          <tag line="359" name="param" description="the parameters to qualify the message" type="array" variable="$params">
            <type by_reference="false">array</type>
          </tag>
          <tag line="359" name="param" description="if true, it is a reset call" type="boolean" variable="$reset">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="359" name="return" description="" type="null">
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="373">
          <name>$id</name>
          <default/>
          <type/>
        </argument>
        <argument line="373">
          <name>$params</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="373">
          <name>$reset</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="409" package="Default">
        <name>resetStatus</name>
        <docblock>
          <description>Resets internal status.</description>
          <long-description/>
          <tag line="404" name="return" description="" type="null">
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="423" package="Default">
        <name>getStatusLevel</name>
        <docblock>
          <description>Gets current status level.</description>
          <long-description/>
          <tag line="415" name="return" description="Current status level {RBPPAVL_DEBUG|RBPPAVL_INFO|RBPPAVL_NOTICE|RBPPAVL_WARNING|RBPPAVL_ERROR}" type="int">
            <type by_reference="false">int</type>
          </tag>
          <tag line="415" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="435" package="Default">
        <name>getStatusCode</name>
        <docblock>
          <description>Gets current status code.</description>
          <long-description/>
          <tag line="428" name="return" description="Current status code" type="int">
            <type by_reference="false">int</type>
          </tag>
          <tag line="428" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="447" package="Default">
        <name>getStatusMessage</name>
        <docblock>
          <description>Gets current status message.</description>
          <long-description/>
          <tag line="440" name="return" description="Current status message" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="440" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="466" package="Default">
        <name>getMessages</name>
        <docblock>
          <description>Gets an array with Rbppavl diagnostic messages.</description>
          <long-description>&lt;p&gt;Each array item is itself an array, with first element being the severity
{RBPPAVL_DEBUG|RBPPAVL_INFO|RBPPAVL_NOTICE|RBPPAVL_WARNING|RBPPAVL_ERROR},
and the second the unqualified diagnostic text.
A % sign precedes in the text a parameter identifier; getStatusMessage()
will replace at run-time the parameters with actual data to qualify the
message.&lt;/p&gt;</long-description>
          <tag line="452" name="return" description="current Rbppavl diagnostic messages" type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="452" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="484" package="Default">
        <name>setMessages</name>
        <docblock>
          <description>Sets Rbppavl diagnostic messages.</description>
          <long-description>&lt;p&gt;Each array item of the input arrayis itself an array, with first
element being the severity {RBPPAVL_DEBUG|RBPPAVL_INFO|RBPPAVL_NOTICE|RBPPAVL_WARNING|RBPPAVL_ERROR},
and the second the unqualified diagnostic text.&lt;/p&gt;</long-description>
          <tag line="471" name="param" description="Rbppavl diagnostic messages" type="array" variable="$table">
            <type by_reference="false">array</type>
          </tag>
          <tag line="471" name="return" description="new complete diagnostic messages map" type="\the">
            <type by_reference="false">\the</type>
          </tag>
          <tag line="471" name="api" description=""/>
        </docblock>
        <argument line="484">
          <name>$table</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="496" package="Default">
        <name>returnBytes</name>
        <docblock>
          <description>Converts a short for memory size into number of bytes.</description>
          <long-description/>
          <tag line="489" name="param" description="a size number in bytes, or KBytes (nnnK), or MBytes (nnnM), or GBytes (nnnG)" type="int|string" variable="$size">
            <type by_reference="false">int</type>
            <type by_reference="false">string</type>
          </tag>
          <tag line="489" name="return" description="number of bytes" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="496">
          <name>$size</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="521" package="Default">
        <name>txt</name>
        <docblock>
          <description>Returns a fully qualified diagnostic message.</description>
          <long-description/>
          <tag line="513" name="param" description="id of the diagnostic message" type="int" variable="$id">
            <type by_reference="false">int</type>
          </tag>
          <tag line="513" name="param" description="parameters to qualify the message" type="array" variable="$params">
            <type by_reference="false">array</type>
          </tag>
          <tag line="513" name="return" description="fully qualified diagnostic text" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="521">
          <name>$id</name>
          <default/>
          <type/>
        </argument>
        <argument line="521">
          <name>$params</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" line="544" package="Default">
        <name>_message</name>
        <docblock>
          <description>Manages Rbppavl diagnostic messages.</description>
          <long-description/>
          <tag line="532" name="param" description="1) diagnostic message code (int|string), or 2) null to get current diagnostic message map, or 3) array to merge a new diagnostic message map" type="mixed" variable="$id">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="532" name="return" description="1) an array with diagnostic message severity and unqualified text, or null if not found 2) the entire map 3) the resulting merged array" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="544">
          <name>$id</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="\RbppavlNode.php" hash="43f45893c821deb7f276f1d2226046a8" package="Rbppavl">
    <docblock>
      <description>PHP AVL binary tree</description>
      <long-description>&lt;p&gt;A set of PHP classes implementing management of binary trees according to
AVL rules.
The API exposes tree management operations (insert, replace, delete, find),
traversal (find, first, last, prev, next, curr). Nodes within the trees are
not exposed publicly.
Tree and traversal operations implement relaxed balance factors, and
parent-pointer node structures.
Hooks for node comparison, error handling and logging capabilities are provided
via a callback interface.&lt;/p&gt;

&lt;p&gt;PHP version 5&lt;/p&gt;</long-description>
      <tag line="2" name="category" description="Structures"/>
      <tag line="2" name="package" description="Rbppavl"/>
      <tag line="2" name="author" description="mondrake &lt;mondrake@mondrake.org&gt;"/>
      <tag line="2" name="license" description="http://www.gnu.org/licenses/gpl.html GNU GPLv3"/>
      <tag line="2" name="link" description="http://github.com/mondrake/Rbppavl" link="http://github.com/mondrake/Rbppavl"/>
    </docblock>
    <class final="false" abstract="false" line="36" namespace="default" package="Rbppavl">
      <name>RbppavlNode</name>
      <extends>\Rbppavl</extends>
      <full_name>\RbppavlNode</full_name>
      <docblock>
        <description>Rbppavl tree node.</description>
        <long-description>&lt;p&gt;Class with node methods.&lt;/p&gt;</long-description>
        <tag line="24" name="category" description="Structures"/>
        <tag line="24" name="package" description="Rbppavl"/>
        <tag line="24" name="author" description="mondrake &lt;mondrake@mondrake.org&gt;"/>
        <tag line="24" name="license" description="http://www.gnu.org/licenses/gpl.html GNU GPLv3"/>
        <tag line="24" name="link" description="http://github.com/mondrake/Rbppavl" link="http://github.com/mondrake/Rbppavl"/>
        <tag line="24" name="access" description="private"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="43" package="Default">
        <name>$link</name>
        <default>array( null</default>
        <docblock>
          <description>Pointers to the node's left and right subtrees</description>
          <long-description/>
          <tag line="38" name="type" description="array"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="50" package="Default">
        <name>$parent</name>
        <default>null</default>
        <docblock>
          <description>Pointer to the node's parent node</description>
          <long-description/>
          <tag line="45" name="type" description="RbppavlNode"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="57" package="Default">
        <name>$data</name>
        <default/>
        <docblock>
          <description>Pointer to the node's data object (payload)</description>
          <long-description/>
          <tag line="52" name="type" description="object"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="64" package="Default">
        <name>$height</name>
        <default/>
        <docblock>
          <description>Height of the node's tree</description>
          <long-description/>
          <tag line="59" name="type" description="integer"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="75" package="Default">
        <name>__construct</name>
        <docblock>
          <description>Constructs a RbppavlNode instance.</description>
          <long-description/>
          <tag line="66" name="param" description="the caller tree" type="object" variable="$tree">
            <type by_reference="false">object</type>
          </tag>
          <tag line="66" name="param" description="the object of the node" type="object" variable="$data">
            <type by_reference="false">object</type>
          </tag>
          <tag line="66" name="param" description="the parent RbppavlNode" type="object" variable="$parent">
            <type by_reference="false">object</type>
          </tag>
          <tag line="66" name="access" description="private"/>
        </docblock>
        <argument line="75">
          <name>$tree</name>
          <default/>
          <type>RbppavlTree</type>
        </argument>
        <argument line="75">
          <name>$data</name>
          <default/>
          <type/>
        </argument>
        <argument line="75">
          <name>$parent</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="94" package="Default">
        <name>balance</name>
        <docblock>
          <description>Returns the current value of the node's balancing factor.</description>
          <long-description>&lt;p&gt;Balance is determined from the difference of the heights of the
node's subtrees.&lt;/p&gt;</long-description>
          <tag line="84" name="return" description="value of the balancing factor" type="int">
            <type by_reference="false">int</type>
          </tag>
          <tag line="84" name="access" description="private"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="111" package="Default">
        <name>heightReset</name>
        <docblock>
          <description>Resets the node's height.</description>
          <long-description>&lt;p&gt;Height is determined from the value of the 'height' property
of the subtrees.&lt;/p&gt;</long-description>
          <tag line="101" name="return" description="" type="null">
            <type by_reference="false">null</type>
          </tag>
          <tag line="101" name="access" description="private"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="134" package="Default">
        <name>wipe</name>
        <docblock>
          <description>Forces removal of the node and of the associated data from the tree.</description>
          <long-description>&lt;p&gt;Recursively remove the node, all the nodes in its subtrees, and all
associated data objects without recalculating heights and balancing
factors of the rest of the tree.
Called by RbppavlTree::_destruct() to orderly free memory when
destructuring a tree object.&lt;/p&gt;</long-description>
          <tag line="119" name="param" description="&amp;$ctr counter of nodes wiped from the tree" type="object" variable="$ctr">
            <type by_reference="false">object</type>
          </tag>
          <tag line="119" name="return" description="number of nodes wiped from the tree" type="int">
            <type by_reference="false">int</type>
          </tag>
          <tag line="119" name="access" description="private"/>
        </docblock>
        <argument line="134">
          <name>$ctr</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="171" package="Default">
        <name>debugNodeValidate</name>
        <docblock>
          <description>Validates the node's compliance to AVL rules.</description>
          <long-description>&lt;p&gt;This method should be used only for debugging purposes.&lt;/p&gt;

&lt;p&gt;Called by RbppavlTree::debugValidate().&lt;/p&gt;</long-description>
          <tag line="156" name="param" description="balancing factor" type="int" variable="$balanceFactor">
            <type by_reference="false">int</type>
          </tag>
          <tag line="156" name="param" description="&amp;$status failure status" type="int" variable="$status">
            <type by_reference="false">int</type>
          </tag>
          <tag line="156" name="param" description="if true, recursively validates all the nodes in the node's subtrees" type="boolean" variable="$recurse">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="156" name="return" description="pointer to the node failing AVL rules, or null if node is compliant" type="object">
            <type by_reference="false">object</type>
          </tag>
          <tag line="156" name="access" description="private"/>
        </docblock>
        <argument line="171">
          <name>$balanceFactor</name>
          <default/>
          <type/>
        </argument>
        <argument line="171">
          <name>$status</name>
          <default/>
          <type/>
        </argument>
        <argument line="171">
          <name>$recurse</name>
          <default>true</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" line="220" package="Default">
        <name>_debugHeightCalculate</name>
        <docblock>
          <description>Calculate the node's height.</description>
          <long-description>&lt;p&gt;This method should be used only for debugging purposes.&lt;/p&gt;

&lt;p&gt;Differently from heightReset(), the height is calculated by recursively
calculating the height of the node's subtrees from the leaf
node upwards. This method is used by debugNodeValidate() to ensure
the height property of a node corresponds to the actual height.
In normal mode, the 'height' property stores the current node's
height, and is updated by RbppavlTree methods to keep it consistent
across tree balancing operations.&lt;/p&gt;</long-description>
          <tag line="203" name="return" description="the node's height" type="int">
            <type by_reference="false">int</type>
          </tag>
          <tag line="203" name="access" description="private"/>
        </docblock>
      </method>
    </class>
  </file>
  <file path="\RbppavlTraverser.php" hash="41f2e20adb48c776d44ae18d22d9db25" package="Rbppavl">
    <docblock>
      <description>PHP AVL binary tree</description>
      <long-description>&lt;p&gt;A set of PHP classes implementing management of binary trees according to
AVL rules.
The API exposes tree management operations (insert, replace, delete, find),
traversal (find, first, last, prev, next, curr). Nodes within the trees are
not exposed publicly.
Tree and traversal operations implement relaxed balance factors, and
parent-pointer node structures.
Hooks for node comparison, error handling and logging capabilities are provided
via a callback interface.&lt;/p&gt;

&lt;p&gt;PHP version 5&lt;/p&gt;</long-description>
      <tag line="2" name="category" description="Structures"/>
      <tag line="2" name="package" description="Rbppavl"/>
      <tag line="2" name="author" description="mondrake &lt;mondrake@mondrake.org&gt;"/>
      <tag line="2" name="license" description="http://www.gnu.org/licenses/gpl.html GNU GPLv3"/>
      <tag line="2" name="link" description="http://github.com/mondrake/Rbppavl" link="http://github.com/mondrake/Rbppavl"/>
    </docblock>
    <class final="false" abstract="false" line="35" namespace="default" package="Rbppavl">
      <name>RbppavlTraverser</name>
      <extends>\RbppavlCommon</extends>
      <full_name>\RbppavlTraverser</full_name>
      <docblock>
        <description>AVL tree in-order traverser.</description>
        <long-description>&lt;p&gt;Implements parent-pointer node structures.&lt;/p&gt;</long-description>
        <tag line="24" name="category" description="Structures"/>
        <tag line="24" name="package" description="Rbppavl"/>
        <tag line="24" name="author" description="mondrake &lt;mondrake@mondrake.org&gt;"/>
        <tag line="24" name="license" description="http://www.gnu.org/licenses/gpl.html GNU GPLv3"/>
        <tag line="24" name="link" description="http://github.com/mondrake/Rbppavl" link="http://github.com/mondrake/Rbppavl"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="42" package="Default">
        <name>$_tree</name>
        <default/>
        <docblock>
          <description>Tree being traversed</description>
          <long-description/>
          <tag line="37" name="type" description="RbppavlTree"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="49" package="Default">
        <name>$_node</name>
        <default/>
        <docblock>
          <description>Cursor to current node in tree</description>
          <long-description/>
          <tag line="44" name="type" description="RbppavlNode"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="61" package="Default">
        <name>__construct</name>
        <docblock>
          <description>Initializes the traverser.</description>
          <long-description/>
          <tag line="51" name="param" description="the tree to be traversed" type="\RbppavlTree" variable="$tree">
            <type by_reference="false">\RbppavlTree</type>
          </tag>
          <tag line="51" name="param" description="if true produces verbose debugging on tree operations" type="boolean" variable="$debugMode">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="51" name="return" description="" type="null">
            <type by_reference="false">null</type>
          </tag>
          <tag line="51" name="api" description=""/>
        </docblock>
        <argument line="61">
          <name>$tree</name>
          <default>null</default>
          <type>RbppavlTree</type>
        </argument>
        <argument line="61">
          <name>$debugMode</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="78" package="Default">
        <name>first</name>
        <docblock>
          <description>Returns the data object with the least value (leftmost).</description>
          <long-description>&lt;p&gt;Cursor is set to identified node.&lt;/p&gt;</long-description>
          <tag line="69" name="return" description="the leftmost data object in the tree or null if tree is empty." type="object">
            <type by_reference="false">object</type>
          </tag>
          <tag line="69" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="94" package="Default">
        <name>last</name>
        <docblock>
          <description>Returns the data object with the greatest value (rightmost).</description>
          <long-description>&lt;p&gt;Cursor is set to identified node.&lt;/p&gt;</long-description>
          <tag line="85" name="return" description="the rightmost data object in the tree or null if tree is empty." type="object">
            <type by_reference="false">object</type>
          </tag>
          <tag line="85" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="117" package="Default">
        <name>find</name>
        <docblock>
          <description>Searches the tree for the specified data object.</description>
          <long-description>&lt;p&gt;If found, cursor is set to identified node, and a pointer to the data
object is returned.
If there is no matching data object, cursor is set to null and
and returns null.&lt;/p&gt;</long-description>
          <tag line="101" name="param" description="data object to be searched" type="object" variable="$data">
            <type by_reference="false">object</type>
          </tag>
          <tag line="101" name="param" description="match mode - by default exact match {RBPPAVL_FIND_EXACT_MATCH|RBPPAVL_FIND_PREV_MATCH|RBPPAVL_FIND_NEXT_MATCH}" type="int" variable="$mode">
            <type by_reference="false">int</type>
          </tag>
          <tag line="101" name="return" description="pointer to data object found, or null if not found" type="object">
            <type by_reference="false">object</type>
          </tag>
          <tag line="101" name="api" description=""/>
        </docblock>
        <argument line="117">
          <name>$data</name>
          <default/>
          <type/>
        </argument>
        <argument line="117">
          <name>$mode</name>
          <default>RBPPAVL_FIND_EXACT_MATCH</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="146" package="Default">
        <name>next</name>
        <docblock>
          <description>Returns the next data object in in-order sequence.</description>
          <long-description>&lt;p&gt;Updates the cursor. If there are no more data objects returns null.
If cursor is not set yet, returns the first data object in in-order sequence.&lt;/p&gt;</long-description>
          <tag line="136" name="return" description="next data object in in-order sequence or null if cursor on rightmost node" type="object">
            <type by_reference="false">object</type>
          </tag>
          <tag line="136" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="163" package="Default">
        <name>prev</name>
        <docblock>
          <description>Returns the previous data object in in-order sequence.</description>
          <long-description>&lt;p&gt;Updates the cursor. If there are no more data objects returns null.
If cursor is not set yet, returns the last data object in in-order sequence.&lt;/p&gt;</long-description>
          <tag line="153" name="return" description="previous data object in in-order sequence or null if cursor on leftmost node" type="object">
            <type by_reference="false">object</type>
          </tag>
          <tag line="153" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="177" package="Default">
        <name>curr</name>
        <docblock>
          <description>Returns the current node's data object.</description>
          <long-description/>
          <tag line="170" name="return" description="data object of current node or null if cursor not initialized yet" type="object">
            <type by_reference="false">object</type>
          </tag>
          <tag line="170" name="api" description=""/>
        </docblock>
      </method>
    </class>
  </file>
  <file path="\RbppavlTree.php" hash="55f19e286f74e68a0a29140aeb42ff5b" package="Rbppavl">
    <docblock>
      <description>PHP AVL binary tree</description>
      <long-description>&lt;p&gt;A set of PHP classes implementing management of binary trees according to
AVL rules.
The API exposes tree management operations (insert, replace, delete, find),
traversal (find, first, last, prev, next, curr). Nodes within the trees are
not exposed publicly.
Tree and traversal operations implement relaxed balance factors, and
parent-pointer node structures.
Hooks for node comparison, error handling and logging capabilities are provided
via a callback interface.&lt;/p&gt;

&lt;p&gt;PHP version 5&lt;/p&gt;</long-description>
      <tag line="2" name="category" description="Structures"/>
      <tag line="2" name="package" description="Rbppavl"/>
      <tag line="2" name="author" description="mondrake &lt;mondrake@mondrake.org&gt;"/>
      <tag line="2" name="license" description="http://www.gnu.org/licenses/gpl.html GNU GPLv3"/>
      <tag line="2" name="link" description="http://github.com/mondrake/Rbppavl" link="http://github.com/mondrake/Rbppavl"/>
    </docblock>
    <class final="false" abstract="false" line="38" namespace="default" package="Rbppavl">
      <name>RbppavlTree</name>
      <extends>\RbppavlCommon</extends>
      <full_name>\RbppavlTree</full_name>
      <docblock>
        <description>AVL tree.</description>
        <long-description>&lt;p&gt;Implements relaxed balance factors, and parent-pointer node structures.
When instantiating a new tree, a callback interface must have been defined
in compliance to RbppavlCbInterface, and its class name passed as an argument.
Rbppavl will create an instance of the specified class.&lt;/p&gt;</long-description>
        <tag line="24" name="category" description="Structures"/>
        <tag line="24" name="package" description="Rbppavl"/>
        <tag line="24" name="author" description="mondrake &lt;mondrake@mondrake.org&gt;"/>
        <tag line="24" name="license" description="http://www.gnu.org/licenses/gpl.html GNU GPLv3"/>
        <tag line="24" name="link" description="http://github.com/mondrake/Rbppavl" link="http://github.com/mondrake/Rbppavl"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="45" package="Default">
        <name>$root</name>
        <default/>
        <docblock>
          <description>Pointer to the root node of the tree</description>
          <long-description/>
          <tag line="40" name="type" description="RbppavlNode"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="52" package="Default">
        <name>$balanceFactor</name>
        <default/>
        <docblock>
          <description>Maximum imbalance allowed for a node</description>
          <long-description/>
          <tag line="47" name="type" description="integer"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="59" package="Default">
        <name>$_count</name>
        <default/>
        <docblock>
          <description>Number of nodes in tree</description>
          <long-description/>
          <tag line="54" name="type" description="integer"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="66" package="Default">
        <name>$_statistics</name>
        <default>array( 'att_ins'  =&gt; 0</default>
        <docblock>
          <description>Internal tree statistics</description>
          <long-description/>
          <tag line="61" name="type" description="array"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="89" package="Default">
        <name>__construct</name>
        <docblock>
          <description>Creates a new tree.</description>
          <long-description/>
          <tag line="78" name="param" description="callback interface class to be instantiated" type="string" variable="$callbackClass">
            <type by_reference="false">string</type>
          </tag>
          <tag line="78" name="param" description="AVL balancing factor of the tree" type="int" variable="$balanceFactor">
            <type by_reference="false">int</type>
          </tag>
          <tag line="78" name="param" description="if true produces verbose debugging on tree operations" type="boolean" variable="$debugMode">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="78" name="param" description="if not null enables available memory checking, with min available memory as per value specified" type="mixed" variable="$memThreshold">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="78" name="api" description=""/>
        </docblock>
        <argument line="89">
          <name>$callbackClass</name>
          <default/>
          <type/>
        </argument>
        <argument line="89">
          <name>$balanceFactor</name>
          <default>1</default>
          <type/>
        </argument>
        <argument line="89">
          <name>$debugMode</name>
          <default>false</default>
          <type/>
        </argument>
        <argument line="89">
          <name>$memThreshold</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="113" package="Default">
        <name>__destruct</name>
        <docblock>
          <description>Destroys a tree.</description>
          <long-description/>
          <tag line="108" name="access" description="private"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="138" package="Default">
        <name>insert</name>
        <docblock>
          <description>Inserts a data object in the tree structure.</description>
          <long-description>&lt;p&gt;Normally returns null if successful.
Use getStatusLevel() and getStatusCode() to check internal error status.&lt;/p&gt;</long-description>
          <tag line="125" name="param" description="data object to be inserted" type="object" variable="$data">
            <type by_reference="false">object</type>
          </tag>
          <tag line="125" name="api" description=""/>
          <tag line="125" name="return" description="null if node was created or internal error occurred; pointer to existing data object if node exists already" type="object">
            <type by_reference="false">object</type>
          </tag>
        </docblock>
        <argument line="138">
          <name>$data</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="169" package="Default">
        <name>replace</name>
        <docblock>
          <description>Replaces a data object in the tree structure.</description>
          <long-description>&lt;p&gt;Normally returns null if successful, or a pointer to the replaced
data object. Note: replaced data object is NOT destructed, calling
code should deal with the duplicated data object.
Use getStatusLevel() and getStatusCode() to check internal error status.&lt;/p&gt;</long-description>
          <tag line="154" name="param" description="data object" type="object" variable="$data">
            <type by_reference="false">object</type>
          </tag>
          <tag line="154" name="return" description="null if node was created or internal error occurred; pointer to replaced data object if node was existing already" type="object">
            <type by_reference="false">object</type>
          </tag>
          <tag line="154" name="api" description=""/>
        </docblock>
        <argument line="169">
          <name>$data</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="200" package="Default">
        <name>find</name>
        <docblock>
          <description>Finds a data object in the tree structure.</description>
          <long-description/>
          <tag line="188" name="param" description="data object to be searched" type="object" variable="$data">
            <type by_reference="false">object</type>
          </tag>
          <tag line="188" name="param" description="match mode - by default exact match {RBPPAVL_FIND_EXACT_MATCH|RBPPAVL_FIND_PREV_MATCH|RBPPAVL_FIND_NEXT_MATCH}" type="int" variable="$mode">
            <type by_reference="false">int</type>
          </tag>
          <tag line="188" name="return" description="null if node was not found or internal error occurred; pointer to data object if node found" type="object">
            <type by_reference="false">object</type>
          </tag>
          <tag line="188" name="api" description=""/>
        </docblock>
        <argument line="200">
          <name>$data</name>
          <default/>
          <type/>
        </argument>
        <argument line="200">
          <name>$mode</name>
          <default>RBPPAVL_FIND_EXACT_MATCH</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="232" package="Default">
        <name>delete</name>
        <docblock>
          <description>Deletes a data object from the tree structure.</description>
          <long-description>&lt;p&gt;Normally returns a pointer to the data object deleted from the structure,
or null if the data object was not found.
Use getStatusLevel() and getStatusCode() to check internal error status.&lt;/p&gt;</long-description>
          <tag line="218" name="param" description="data object to be deleted" type="object" variable="$data">
            <type by_reference="false">object</type>
          </tag>
          <tag line="218" name="return" description="null if node was not found or internal error occurred; pointer to existing data object if node deleted" type="object">
            <type by_reference="false">object</type>
          </tag>
          <tag line="218" name="api" description=""/>
        </docblock>
        <argument line="232">
          <name>$data</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="425" package="Default">
        <name>getCount</name>
        <docblock>
          <description>Return the number of nodes in the tree.</description>
          <long-description/>
          <tag line="418" name="api" description=""/>
          <tag line="418" name="return" description="number of nodes in the tree" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" line="441" package="Default">
        <name>_nodeProbe</name>
        <docblock>
          <description>Inserts a node in the tree and returns a pointer to the node inserted.</description>
          <long-description>&lt;p&gt;If a duplicate data object is found in the tree, returns a pointer to the duplicate node
without inserting the new data object.&lt;/p&gt;</long-description>
          <tag line="431" name="param" description="the data object to be inserted" type="object" variable="$data">
            <type by_reference="false">object</type>
          </tag>
          <tag line="431" name="return" description="pointer to the node inserted" type="object">
            <type by_reference="false">object</type>
          </tag>
        </docblock>
        <argument line="441">
          <name>$data</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" line="538" package="Default">
        <name>_rotationRebalance</name>
        <docblock>
          <description>Performs rotation on the node to restore AVL compliance.</description>
          <long-description/>
          <tag line="531" name="param" description="node to be rotated" type="object" variable="$y">
            <type by_reference="false">object</type>
          </tag>
          <tag line="531" name="return" description="" type="null">
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="538">
          <name>$y</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="673" package="Default">
        <name>debugValidate</name>
        <docblock>
          <description>Validates tree's AVL compliance.</description>
          <long-description>&lt;p&gt;This method should be used only for debugging purposes.&lt;/p&gt;

&lt;p&gt;Recursively checks all nodes in tree to see if nodes' height property and
balance factor are computed correctly.&lt;/p&gt;</long-description>
          <tag line="658" name="param" description="if true and validation is successful, internal status is updated and a diagnostic message broadcast" type="boolean" variable="$setStatusOnSuccess">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="658" name="return" description="the data object of the first failing node or null if successful" type="object">
            <type by_reference="false">object</type>
          </tag>
          <tag line="658" name="api" description=""/>
        </docblock>
        <argument line="673">
          <name>$setStatusOnSuccess</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="720" package="Default">
        <name>debugLevelOrderToArray</name>
        <docblock>
          <description>Returns an array of nodes by level and left-to-right order.</description>
          <long-description>&lt;p&gt;This method should be used only for debugging purposes.&lt;/p&gt;

&lt;p&gt;Basically, performs a level-order traversal of the tree, associating each node
to its level and position within the level, and build an array with associated
keys.&lt;/p&gt;</long-description>
          <tag line="703" name="param" description="maximum number of levels to be returned" type="int" variable="$maxLevel">
            <type by_reference="false">int</type>
          </tag>
          <tag line="703" name="return" description="an array in the format $arr[$lev][$pos] where $lev is the level of the node in the tree, and $pos the position of the node in the level" type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="703" name="api" description=""/>
        </docblock>
        <argument line="720">
          <name>$maxLevel</name>
          <default>5</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" line="742" package="Default">
        <name>_debugNodeToArray</name>
        <docblock>
          <description>Inserts a node in a level-order array.</description>
          <long-description>&lt;p&gt;This method should be used only for debugging purposes.&lt;/p&gt;

&lt;p&gt;This method is called by debugLevelOrderToArray(). It works recursively.&lt;/p&gt;</long-description>
          <tag line="727" name="param" description="the node to be inserted in the array" type="object" variable="$node">
            <type by_reference="false">object</type>
          </tag>
          <tag line="727" name="param" description="the level at which the node is positioned" type="int" variable="$level">
            <type by_reference="false">int</type>
          </tag>
          <tag line="727" name="param" description="the node position in the level in binary notation" type="string" variable="$pos">
            <type by_reference="false">string</type>
          </tag>
          <tag line="727" name="param" description="maximum level to recurse down to" type="int" variable="$maxLevel">
            <type by_reference="false">int</type>
          </tag>
          <tag line="727" name="param" description="&amp;$arr the array to be filled" type="array" variable="$arr">
            <type by_reference="false">array</type>
          </tag>
          <tag line="727" name="return" description="" type="null">
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="742">
          <name>$node</name>
          <default/>
          <type/>
        </argument>
        <argument line="742">
          <name>$level</name>
          <default/>
          <type/>
        </argument>
        <argument line="742">
          <name>$pos</name>
          <default/>
          <type/>
        </argument>
        <argument line="742">
          <name>$maxLevel</name>
          <default/>
          <type/>
        </argument>
        <argument line="742">
          <name>$arr</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="795" package="Default">
        <name>getStatistics</name>
        <docblock>
          <description>Gets internal tree statistics.</description>
          <long-description>&lt;p&gt;Rbppavl maintains an internal set of statistics on tree operation performed in an
associative array. The keys of the array are the following:
- 'balance_factor' tree's balance factor
- 'height'         root height
- 'count'          nodes in tree
- 'ins'            successful inserts
- 'ins'            successful inserts
- 'att_ins'        attempted inserts
- 'rep'            successful replaces
- 'att_rep'        attempted replaces
- 'del'            successful deletes
- 'att_del'        attempted deletes
- 'self'           number of self-balances
- 'll'             number of LL rotations
- 'lr'             number of LR rotations
- 'rr'             number of RR rotations
- 'rl'             number of RL rotations&lt;/p&gt;</long-description>
          <tag line="766" name="param" description="the statistic key to return, or null to return the whole array of statistics" type="string" variable="$stat">
            <type by_reference="false">string</type>
          </tag>
          <tag line="766" name="param" description="if true, internal status is updated and diagnostic message is broadcast" type="boolean" variable="$setStatus">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="766" name="return" description="value of the statistic key requested, or the whole array of statistics if no statistic key specified" type="int|array">
            <type by_reference="false">int</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="766" name="api" description=""/>
        </docblock>
        <argument line="795">
          <name>$stat</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="795">
          <name>$setStatus</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <package name="Default"/>
  <package name="Rbppavl"/>
  <namespace name="default"/>
  <marker>todo</marker>
  <marker>fixme</marker>
</project>
